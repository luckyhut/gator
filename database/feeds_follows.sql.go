// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feeds_follows.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :exec
WITH inserted_feed_follow AS (
    INSERT INTO feed_follows (id, created_at, updated_at, user_id, feed_id)
        VALUES ($1, $2, $3, $4, $5)
    RETURNING id, created_at, updated_at, user_id, feed_id
)
select
    inserted_feed_follow.id, inserted_feed_follow.created_at, inserted_feed_follow.updated_at, inserted_feed_follow.user_id, inserted_feed_follow.feed_id,
    u.name AS feed_name,
    f.name AS user_name
from inserted_feed_follow
inner join
    users u on inserted_feed_follow.user_id = u.id
inner join
    feeds f on inserted_feed_follow.feed_id = f.id
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) error {
	_, err := q.db.ExecContext(ctx, createFeedFollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	return err
}

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many
select f.name as feed_name, u.name as user_name
from feed_follows
inner join
    users u on feed_follows.user_id = u.id
inner join
    feeds f on feed_follows.feed_id = f.id
where feed_follows.user_id = $1
`

type GetFeedFollowsForUserRow struct {
	FeedName sql.NullString
	UserName string
}

func (q *Queries) GetFeedFollowsForUser(ctx context.Context, userID uuid.UUID) ([]GetFeedFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsForUserRow
	for rows.Next() {
		var i GetFeedFollowsForUserRow
		if err := rows.Scan(&i.FeedName, &i.UserName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetFeedFollow = `-- name: ResetFeedFollow :exec
DELETE FROM feed_follows
`

func (q *Queries) ResetFeedFollow(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetFeedFollow)
	return err
}

const unfollow = `-- name: Unfollow :many
DELETE FROM feed_follows
WHERE user_id = $1
AND feed_id = $2
RETURNING user_id
`

type UnfollowParams struct {
	UserID uuid.UUID
	FeedID uuid.UUID
}

func (q *Queries) Unfollow(ctx context.Context, arg UnfollowParams) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, unfollow, arg.UserID, arg.FeedID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var user_id uuid.UUID
		if err := rows.Scan(&user_id); err != nil {
			return nil, err
		}
		items = append(items, user_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
